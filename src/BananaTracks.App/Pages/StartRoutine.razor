@page "/routines/{RoutineId}/start"
@inherits AppComponentBase

<PageTitle>Run Routine</PageTitle>

<Loading IsLoading="_routineRun is null">
	
	<h1>@_routineRun!.Name</h1>
	
	<div class="row">
		<div class="col-sm-12 col-md-4 mb-3">
			<div class="d-grid">
			@switch (_routineRun.Status)
			{
				case RunStatus.IsPending:
				default:
					<button type="button" @onclick="RunTimer" class="btn btn-primary">Start <i class="fa-solid fa-play ms-1"></i></button>
					break;
				case RunStatus.IsRunning:
					<button type="button" class="btn btn-secondary">Pause <i class="fa-solid fa-pause ms-1"></i></button>
					break;
				case RunStatus.IsDone:
					<button type="button" class="btn btn-secondary">Restart <i class="fa-solid fa-play ms-1"></i></button>
					break;
			}
			</div>
		</div>
		<div class="col-sm-12 col-md-8 mb-3">
			<div class="form-check">
				<input id="@Ids.Next()" class="form-check-input" type="checkbox" value="" @bind="_saveSession">
				<label for="@Ids.Current()" class="form-check-label">
					Save session when complete
				</label>
			</div>
		</div>
	</div>
	
	@foreach (var activity in _routineRun.Activities)
	{
		<div class="@(activity.Status is ActivityStatus.IsRunning or ActivityStatus.IsBreaking ? "card card-active" : "card")">
			<div class="card-body">
				@activity.Activity.Name
				@if (!string.IsNullOrWhiteSpace(activity.Activity.AudioUrl))
				{
					<audio id="audio-@activity.Activity.ActivityId" src="@activity.Activity.AudioUrl"></audio>
				}
			</div>
			<div class="card-footer text-muted">
				@switch (activity.Status)
				{
					case ActivityStatus.IsPending:
						<span class="d-flex align-items-center">
							<i class="fa-regular fa-square fa-lg me-2"></i>
							<span class="timer me-1">@DisplayTime(activity.DurationRemaining)</span>
						</span>
						break;
					case ActivityStatus.IsRunning:
						<span class="d-flex align-items-center">
							<i class="fa-solid fa-timer fa-lg me-2"></i>
							<span class="timer me-1">@DisplayTime(activity.DurationRemaining)</span> (running)
						</span>
						break;
					case ActivityStatus.IsBreaking:
						<span class="d-flex align-items-center">
							<i class="fa-solid fa-timer fa-lg me-2"></i>
							<span class="timer me-1">@DisplayTime(activity.BreakRemaining)</span> (break)
						</span>
						break;
					case ActivityStatus.IsDone:
						<span class="d-flex align-items-center">
							<i class="fa-solid fa-square-check fa-lg me-2"></i>
							<span class="timer me-1">DONE</span>
						</span>

						break;
				}
			</div>
		</div>
	}
</Loading>

<audio id="audio-break" src="https://cdn.bananatracks.com/polly/.73eea05b-081d-48dc-904e-6f9f5c9c3314.mp3"></audio>
<audio id="audio-done" src="https://cdn.bananatracks.com/polly/.630dd440-cba7-47ce-a2b6-31f8b17e2d6e.mp3"></audio>
